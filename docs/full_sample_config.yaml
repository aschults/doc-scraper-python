#
# Configure a pipeline
#
# Load from various sources (some are aware of command line arg)
sources:
    # Load from local files (as HTML).
    -   kind: doc_files
        # Configuration to load from local files.
        config:
            # Paths to local files.
            doc_filenames:
            -   "/path/to/a"
            -   "/path/to/b"
        
    # Load from Google Drive API as exported HTML.
    -   kind: google_doc_html
        # Configuration of Google Docs to download.
        config:
            # Document IDs (part of the URL) to download.
            doc_ids:
            -   "1HZUlXXXXXX_SAMPLE1_XXXXXXIAQOa-xx9XxXx-xXxx"
            -   "1HZUlXXXXXX_SAMPLE2_XXXXXXIAQOa-xx9XxXx-xXxx"
            # Google account username (as email), incl. service accounts.
            username: "someone@gmail.com"
        
    

# Steps executed in order to modify the documents
transformations:
    # Merge paragraph items by matching tags.
    -   kind: merge_by_tag
        # Configuration for merging paragraph elements by tag.
        config:
            merge_as_text_run: False  # Default
            match_element:
                element_types:  # Any paragraph element, e.g. TextRun
                -   "ParagraphElement"
                    # element_types:  # Specifically only Chips and BulletItems
                    # -   "Chips"
                    # -   "BulletItem"
                # List of list of tags, all required for the match to happen.
                required_tag_sets:
                -   A: .*
                    B:
                -   C: .*
                # Tags that stop any match if present.
                rejected_tags:  # No Elements tagged with X will be matched.
                    X: .+
                # Styles required for the tag to match. All need to match.
                required_style_sets:
                -   font-size: "20pt"
                    font-weight: "bold"
                -   color: "red"
                # Styles that prevent matching. Only one needs to match.
                rejected_styles:
                    font-weight: "400"
                # If set to True, quotes in style values are removed.
                skip_style_quotes: True  # Default
                # The Python regex to match with element's text representation.
                aggregated_text_regex: "some text\\s+in doc"
                # List of expressions to interpolate and match.
                element_expressions:
                -   expr: "{0.text}--{0.url}"  # Element text, followed by url from element(0)
                        # expr: "{0.tags[tag1]}"  # Grab value of tag "tag1"
                    regex_match: text---http.*
                    ignore_key_errors: False  # Default
        
    # Rearrange bullet items so they are properly nested (in attribute named "neseted"
    -   kind: nest_bullets
        
    # Rearrange the doc to match the hierarchy of headings.
    -   kind: nest_sections
        
    -   kind: regex_replace
        # Configuration for modifying text by regular expression.
        config:
            # Constraints required for the substitution to happen.
            match:
                element_types:  # Any paragraph element, e.g. TextRun
                -   "ParagraphElement"
                    # element_types:  # Specifically only Chips and BulletItems
                    # -   "Chips"
                    # -   "BulletItem"
                # List of list of tags, all required for the match to happen.
                required_tag_sets:
                -   A: .*
                    B:
                -   C: .*
                # Tags that stop any match if present.
                rejected_tags:  # No Elements tagged with X will be matched.
                    X: .+
                # Styles required for the tag to match. All need to match.
                required_style_sets:
                -   font-size: "20pt"
                    font-weight: "bold"
                -   color: "red"
                # Styles that prevent matching. Only one needs to match.
                rejected_styles:
                    font-weight: "400"
                # If set to True, quotes in style values are removed.
                skip_style_quotes: True  # Default
                # The Python regex to match with element's text representation.
                aggregated_text_regex: "some text\\s+in doc"
                # List of expressions to interpolate and match.
                element_expressions:
                -   expr: "{0.text}--{0.url}"  # Element text, followed by url from element(0)
                        # expr: "{0.tags[tag1]}"  # Grab value of tag "tag1"
                    regex_match: text---http.*
                    ignore_key_errors: False  # Default
            # List of regex-based replacements.
            substitutions:
            -   # The Python regex to match.
                regex: "\\s+"  # All spaces (including newline)
                # The replacement text.
                substitute: " "  # Replace with one space
                # Additional operation to apply.
                operation: "lower"  # Make all lower case
        
    # Remove unwanted keys from attrs, style and ShardData.style_rules
    -   kind: strip_elements
        # Configuration for removing unwanted attributes.
        config:
            # List for regexes. Matching keys in `attribs` are removed.
            remove_attrs_re:  # Remove all starting with _ or X_
            -   "_.*"
            -   "X_.*"
            # List for regexes. Matching keys in `styles` are removed.
            remove_styles_re:  # Remove all styles with "font" in the key
            -   ".*font.*"
            # List for regexes. Matching keys in `style_rules are removed from SharedData.
            remove_style_rules_re:  # Remove all starting ".lst" or "ul."
            -   "\\.lst.*"
            -   "ul\\..*"
        
    # Add tags to any element if they match the criteria.
    -   kind: tag_matching
        # Match and tag elements, including variables for interpolation.
        config:
            # Updates for tags
            tags:
                # A list of tags to add.
                add:
                    tag1: "val1"
                    tag2: "val2"
                # A list of tags to remove. Use "*" to clear all.
                remove:  # Add two tags
                -   "tag3"
                -   "tag4"
                    # remove:  # Clear tags before adding
                    # -   "*"
                ignore_errors: False  # Default
            # Criteria to match elements for tagging.
            match_element:
                element_types:  # Any paragraph element, e.g. TextRun
                -   "ParagraphElement"
                    # element_types:  # Specifically only Chips and BulletItems
                    # -   "Chips"
                    # -   "BulletItem"
                # List of list of tags, all required for the match to happen.
                required_tag_sets:
                -   A: .*
                    B:
                -   C: .*
                # Tags that stop any match if present.
                rejected_tags:  # No Elements tagged with X will be matched.
                    X: .+
                # Styles required for the tag to match. All need to match.
                required_style_sets:
                -   font-size: "20pt"
                    font-weight: "bold"
                -   color: "red"
                # Styles that prevent matching. Only one needs to match.
                rejected_styles:
                    font-weight: "400"
                # If set to True, quotes in style values are removed.
                skip_style_quotes: True  # Default
                # The Python regex to match with element's text representation.
                aggregated_text_regex: "some text\\s+in doc"
                # List of expressions to interpolate and match.
                element_expressions:
                -   expr: "{0.text}--{0.url}"  # Element text, followed by url from element(0)
                        # expr: "{0.tags[tag1]}"  # Grab value of tag "tag1"
                    regex_match: text---http.*
                    ignore_key_errors: False  # Default
                # Horitzontal start of matched elements. Unbound if not set.
                start_col: 0  # From first col
                    # start_col: -1  # Last column
                # Horitzontal end of matched elements. Unbound if not set.
                end_col: 4  # Until 3rd col
                    # end_col: 1  # First column
                # Vertical start of matched elements. Unbound if not set.
                start_row: 0  # From first row
                    # start_row: -1  # Last row
                # Vertical end of matched elements. Unbound if not set.
                end_row: 4  # Until 3rd row
                    # end_row: 1  # First row
            # List of ordered criteria to match along the ancestors
            match_ancestor_list:
            -   element_types:  # Any paragraph element, e.g. TextRun
                -   "ParagraphElement"
                    # element_types:  # Specifically only Chips and BulletItems
                    # -   "Chips"
                    # -   "BulletItem"
                # List of list of tags, all required for the match to happen.
                required_tag_sets:
                -   A: .*
                    B:
                -   C: .*
                # Tags that stop any match if present.
                rejected_tags:  # No Elements tagged with X will be matched.
                    X: .+
                # Styles required for the tag to match. All need to match.
                required_style_sets:
                -   font-size: "20pt"
                    font-weight: "bold"
                -   color: "red"
                # Styles that prevent matching. Only one needs to match.
                rejected_styles:
                    font-weight: "400"
                # If set to True, quotes in style values are removed.
                skip_style_quotes: True  # Default
                # The Python regex to match with element's text representation.
                aggregated_text_regex: "some text\\s+in doc"
                # List of expressions to interpolate and match.
                element_expressions:
                -   expr: "{0.text}--{0.url}"  # Element text, followed by url from element(0)
                        # expr: "{0.tags[tag1]}"  # Grab value of tag "tag1"
                    regex_match: text---http.*
                    ignore_key_errors: False  # Default
            # Criteria to match any descendent of the current element.
            match_descendent:
                element_types:  # Any paragraph element, e.g. TextRun
                -   "ParagraphElement"
                    # element_types:  # Specifically only Chips and BulletItems
                    # -   "Chips"
                    # -   "BulletItem"
                # List of list of tags, all required for the match to happen.
                required_tag_sets:
                -   A: .*
                    B:
                -   C: .*
                # Tags that stop any match if present.
                rejected_tags:  # No Elements tagged with X will be matched.
                    X: .+
                # Styles required for the tag to match. All need to match.
                required_style_sets:
                -   font-size: "20pt"
                    font-weight: "bold"
                -   color: "red"
                # Styles that prevent matching. Only one needs to match.
                rejected_styles:
                    font-weight: "400"
                # If set to True, quotes in style values are removed.
                skip_style_quotes: True  # Default
                # The Python regex to match with element's text representation.
                aggregated_text_regex: "some text\\s+in doc"
                # List of expressions to interpolate and match.
                element_expressions:
                -   expr: "{0.text}--{0.url}"  # Element text, followed by url from element(0)
                        # expr: "{0.tags[tag1]}"  # Grab value of tag "tag1"
                    regex_match: text---http.*
                    ignore_key_errors: False  # Default
            # Variables to provide for the interpolation of tags.
            variables:
                ancestor_path:
                    # Template to use to render each level's value.
                    level_value: "0.tags[heading]"  # tag "heading" of each level
                    # Separator between each level_value
                    separator: "/"  # Default
                    # Level starting from 0 at the root to start the path.
                    level_start: 1  # start at the 2nd level
                    # Level starting from 0 at the root to end the path.
                    level_end: 2  # exclude level 3 and below
                related_element:
                    # Relative position at which to get the element.
                    element_at:
                        # Horizontal relative position of the element.
                        col: first # others: last, prev, next
                        # Vertical relative position of the element.
                        row: first # others: last, prev, next
        
    

# Places to write down the result
outputs:
    # Write to a single file, with separators between.
    -   kind: single_file
        # Configuration to write to a single file, concatenated.
        config:
            # Provide a filename to write to. Default: stdout
            output_file: "/tmp/file.json"
        
    # Write to stdout, with separators between.
    -   kind: stdout
        
    # Write to individual files, with templated filenames
    -   kind: template_path
        # Configuration for temlate-based file outpout.
        config:
            # Template for the filename. Text in braces ({var}) is expanded.
            # 
            # All attributes in Document.attrs are supported,
            # and "i" (as file counter)
            output_path_template: "file{i}.json"  # Suffix every file with a number
                # output_path_template: "filename_{blah}.json"  # Use attribute "blah" from attrs.
        
    
